// Code generated by go-bindata.
// sources:
// schema.graphql
// type/base.graphql
// type/greeter.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\xca\x20\x91\xdc\xd2\x92\xc4\x92\xcc\xfc\x3c\x2b\x05\x5f\x28\x8b\xab\x96\x8b\xab\xa4\xb2\x20\x15\xa2\x0a\xaa\x51\x59\xe1\xd9\xfc\xa5\x2f\xd6\x2f\x02\x73\x32\x52\x73\x72\xf2\x35\xf2\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x35\xad\xdc\x8b\x52\x53\x4b\x52\x8b\xb8\x6a\x01\x01\x00\x00\xff\xff\xb9\xc9\x27\x66\x71\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 113, mode: os.FileMode(420), modTime: time.Unix(1531102744, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeBaseGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x31\x6e\x14\x41\x10\x45\xf3\x3e\xc5\xb7\x36\xb5\x38\xc0\x26\x08\xd8\x64\x12\xcb\x02\x4b\xc4\xb5\x3d\xd5\x3b\x05\x33\xd5\x43\x75\x0d\x06\x21\x07\x24\x88\x1b\x38\xf6\x09\x48\x80\x94\xcb\x80\x25\xdf\x02\x4d\x8f\xbd\x01\x32\x36\x38\xae\xff\xdf\xff\xfd\x7b\x85\x27\x8a\xbc\x7d\xc5\xd1\x71\x2a\xde\x81\x14\xcd\x26\x88\x3a\x5b\xa2\xc8\x38\xca\x2d\xe3\x43\x00\x80\x15\x4e\x3a\x86\xb4\xc8\x09\xde\xf1\xb5\xed\x51\xbd\x49\xbb\x46\xb3\x39\x08\x67\x21\xac\x30\xd2\x4e\x94\x9c\x61\xfc\x66\xe2\xe2\x18\xc9\x68\x60\x67\x0b\xa2\xe3\xe4\x38\x5e\x04\x92\x75\x8f\x7e\xce\x3e\x99\x96\x0a\x4e\x62\xc5\xa1\xe0\x9e\x07\x56\x2f\x48\x96\x87\x7a\xe9\xa5\x5c\x07\x56\xcd\x1a\x8d\xfa\xe1\x2d\x84\xbd\x53\x74\xef\x83\x77\xe4\x88\x79\x60\x50\x72\xb6\x7a\x28\x23\x47\x49\xc2\x2d\x76\x7d\xde\x52\x8f\x66\xb3\xf0\xab\x64\x8d\x17\x6e\xa2\xbb\xdb\x22\x7a\xba\xb7\xe3\x2c\x79\x68\xc5\x2d\xa7\x6c\x7c\x77\xc7\x45\x73\x53\x72\xd9\xfe\xd7\xe7\x4f\x57\x17\xdf\x7e\xfe\xb8\xb8\xfc\xf8\x25\xf8\xfb\x91\xe7\xb1\xb9\xd1\x94\xf7\x53\xbf\xec\x58\x6f\xfe\x48\x74\x87\x2d\xc5\xd7\xa7\x64\x6d\x39\xac\x71\x71\xb2\x92\x0d\x9e\x11\xb3\xba\xe8\xc4\x4b\x5a\x71\x32\x7f\x56\x8f\xf3\x5f\xff\x05\x96\xb2\xfd\x03\x8b\xb5\xfd\x0f\x12\x2d\x43\x18\x63\x98\x37\x11\xe7\xa1\x3c\xae\xae\x8e\xca\x11\xbf\xf3\xf9\x89\x6b\x3c\xcd\xb9\x67\xd2\x83\xfb\x9f\x79\x27\xf0\xd8\xf8\xad\xe4\xa9\xfc\x01\x3d\x0b\x2b\x5c\x9e\x7f\xbf\x3a\xff\x1a\x4a\xa4\x9e\x0c\x27\x32\xf0\xef\x00\x00\x00\xff\xff\x36\xdc\xf1\x36\x40\x03\x00\x00")

func typeBaseGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeBaseGraphql,
		"type/base.graphql",
	)
}

func typeBaseGraphql() (*asset, error) {
	bytes, err := typeBaseGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/base.graphql", size: 832, mode: os.FileMode(420), modTime: time.Unix(1529488388, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeGreeterGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2f\x4a\x4d\x2d\x49\x2d\x52\xc8\xcc\x2d\xc8\x49\xcd\x4d\xcd\x2b\x29\x56\xf0\xcb\x4f\x49\x55\xa8\xe6\x52\x50\x50\x50\x50\x56\x78\xb1\x6e\xff\xcb\xe9\xeb\x32\x53\xc0\xdc\xcc\x14\x2b\x05\x4f\x17\x45\xa8\xd4\xb3\x6d\x1d\xcf\x1a\xd7\x83\x39\xb9\xc5\xe9\x56\x0a\xc1\x25\x45\x99\x79\xe9\x8a\x28\x1a\x9f\x4d\xdf\xf6\x72\xfa\x16\xb0\x50\x4a\x62\x49\xaa\x95\x42\x48\x66\x6e\x2a\x57\x2d\x17\x20\x00\x00\xff\xff\xa2\x67\x8d\xf4\x7c\x00\x00\x00")

func typeGreeterGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeGreeterGraphql,
		"type/greeter.graphql",
	)
}

func typeGreeterGraphql() (*asset, error) {
	bytes, err := typeGreeterGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/greeter.graphql", size: 124, mode: os.FileMode(420), modTime: time.Unix(1531102774, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql":       schemaGraphql,
	"type/base.graphql":    typeBaseGraphql,
	"type/greeter.graphql": typeGreeterGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"base.graphql":    &bintree{typeBaseGraphql, map[string]*bintree{}},
		"greeter.graphql": &bintree{typeGreeterGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
